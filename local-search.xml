<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[2.1,已适配学生机房管理助手7.8]横扫极域，做回自己！</title>
    <link href="/2024/09/17/2-1-%E5%B7%B2%E9%80%82%E9%85%8D%E5%AD%A6%E7%94%9F%E6%9C%BA%E6%88%BF%E7%AE%A1%E7%90%86%E5%8A%A9%E6%89%8B7-8-%E6%A8%AA%E6%89%AB%E6%9E%81%E5%9F%9F%EF%BC%8C%E5%81%9A%E5%9B%9E%E8%87%AA%E5%B7%B1%EF%BC%81/"/>
    <url>/2024/09/17/2-1-%E5%B7%B2%E9%80%82%E9%85%8D%E5%AD%A6%E7%94%9F%E6%9C%BA%E6%88%BF%E7%AE%A1%E7%90%86%E5%8A%A9%E6%89%8B7-8-%E6%A8%AA%E6%89%AB%E6%9E%81%E5%9F%9F%EF%BC%8C%E5%81%9A%E5%9B%9E%E8%87%AA%E5%B7%B1%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="【1-2，已适配机房助手7-8】更新中！淦翻极域、机房助手的超强软件，附代码思路（附带解断网、U盘）"><a href="#【1-2，已适配机房助手7-8】更新中！淦翻极域、机房助手的超强软件，附代码思路（附带解断网、U盘）" class="headerlink" title="【1.2，已适配机房助手7.8】更新中！淦翻极域、机房助手的超强软件，附代码思路（附带解断网、U盘）"></a>【1.2，已适配机房助手7.8】更新中！淦翻极域、机房助手的超强软件，附代码思路（附带解断网、U盘）</h1><p><strong>本文内容仅供学习，不得用于商业用途，使用本工具造成的任何后果与本软件及其作者无关！</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/ae1108b4d85741a89255754f7db5f61e.png" alt="截图"><br>本软件最新版是1.2。<a href="https://blog.csdn.net/weixin_42112038/article/details/131147700">传送门</a></p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p><strong>源码也在内！</strong><br>下载：<a href="https://wwt.lanzoub.com/b00pu06li">https://wwt.lanzoub.com/b00pu06li</a><br>密码：bbzl<br>GitHub：<a href="https://github.com/BengbuGuards/MythwareToolkit/">https://github.com/BengbuGuards/MythwareToolkit/</a><br>GitHub上的版本库持续更新中，欢迎星标以追踪更新！</p><h4 id="任务栏托盘图标"><a href="#任务栏托盘图标" class="headerlink" title="任务栏托盘图标"></a>任务栏托盘图标</h4><p><img src="https://iblog.csdnimg.cn/blog_migrate/b83541a2d55bd3afed4867a3f26267cb.png" alt="什么鬼水印啊"><br>直接点击关闭按钮或最小化时大图标从任务栏隐藏，会藏到任务栏托盘</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>Alt+C双击杀掉当前进程，Alt+W最小化顶层窗口（也可以把鼠标移动到屏幕左上角，移动到右上角可关闭窗口，默认关闭此功能），Alt+B唤起主窗口</p><p>下面是原理</p><h3 id="杀掉极域进程"><a href="#杀掉极域进程" class="headerlink" title="杀掉极域进程"></a>杀掉极域进程</h3><p>大多数工具都用了ntsd或taskkill来杀进程，不过容易被封杀（机房助手已经禁用了，映像劫持）。去除控制使用的方法，具体是暴力杀线程（即下方方法）或者清零ntdll基址（强制卸载ntdll模块，代码中存在，但是没有使用）。为什么不用最简单的<code>TerminateProcess()</code>？请看：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/1ebdccfb8b963b2c0971670c2b0fff7c.png" alt="尴尬啊"><br>这个函数被极域hook了（其实准确地说它hook的发挥作用的函数是<code>NtOpenProcess()</code>，SSDT Hook，无论哪个程序调用都被它拦），如果结束的是极域的进程，就拦截。其实有个简单的办法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> KILL_FORCE 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KILL_DEFAULT 2</span><br><span class="hljs-comment">//用杀掉每个线程的方法解决某些进程hook住了TerminateProcess()的问题</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">KillProcess</span><span class="hljs-params">(DWORD dwProcessID, <span class="hljs-type">int</span> way)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (way == KILL_FORCE) &#123;<br>HANDLE hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, dwProcessID);<br><br><span class="hljs-keyword">if</span> (hSnapshot != INVALID_HANDLE_VALUE) &#123;<br><span class="hljs-type">bool</span> rtn = <span class="hljs-literal">false</span>;<br>THREADENTRY32 te = &#123;<span class="hljs-built_in">sizeof</span>(te)&#125;;<br>BOOL fOk = <span class="hljs-built_in">Thread32First</span>(hSnapshot, &amp;te);<br><span class="hljs-keyword">for</span> (; fOk; fOk = <span class="hljs-built_in">Thread32Next</span>(hSnapshot, &amp;te)) &#123;<br><span class="hljs-keyword">if</span> (te.th32OwnerProcessID == dwProcessID) &#123;<br>HANDLE hThread = <span class="hljs-built_in">OpenThread</span>(THREAD_TERMINATE, FALSE, te.th32ThreadID);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">TerminateThread</span>(hThread, <span class="hljs-number">0</span>)) rtn = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">CloseHandle</span>(hThread);<br>&#125;<br>&#125;<br><span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br><span class="hljs-keyword">return</span> rtn;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (way == KILL_DEFAULT) &#123;<br><span class="hljs-comment">//默认方法，稳定安全</span><br>HANDLE handle = <span class="hljs-built_in">OpenProcess</span>(PROCESS_TERMINATE, FALSE, dwProcessID);<br>WINBOOL sta = <span class="hljs-built_in">TerminateProcess</span>(handle, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CloseHandle</span>(handle);<br><span class="hljs-keyword">return</span> sta;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果把进程看作一个团伙，那么线程就是团伙的成员，如果把每个成员都干掉了，那么这个团伙就也完蛋了。极域并没有hook<code>TerminateThread()</code>，所以用这种办法来干掉进程。<br>有些反极域软件声称是驱动级杀进程，其实没这个必要，又不是终止杀毒软件，用驱动开销太大了。</p><h3 id="挂起（即冻结）-恢复极域"><a href="#挂起（即冻结）-恢复极域" class="headerlink" title="挂起（即冻结）&#x2F;恢复极域"></a>挂起（即冻结）&#x2F;恢复极域</h3><p>原理详见<a href="https://blog.csdn.net/weixin_42112038/article/details/126243863">win32 判断进程状态（挂起&#x2F;运行中）、用API挂起&#x2F;恢复进程</a>。挂起极域后，老师那里显示的屏幕被冻结，固定画面，时间长一些可能会掉线。</p><h3 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h3><p>这里用的是这个文章的算法，原算法位于<a href="https://github.com/MuliMuri/Mythware/blob/master/Test/Program.cs">https://github.com/MuliMuri/Mythware/blob/master/Test/Program.cs</a>，由此博文作者改写：<a href="https://blog.csdn.net/liu_zhou_zhou/article/details/118603143">(更新中)极域破解分析（杀死和重启，挂起和恢复，解除全屏按钮限制，解除键盘锁，获取极域安装路径，极域密码破解）</a></p><h3 id="杀掉学生机房管理助手"><a href="#杀掉学生机房管理助手" class="headerlink" title="杀掉学生机房管理助手"></a>杀掉学生机房管理助手</h3><p>机房助手有两个进程，<code>prozs.exe</code>和<code>jfglzs.exe</code>，其中<code>prozs.exe</code>的名字是随机的，每天都不一样，具体看我的文章：<br><a href="https://blog.csdn.net/weixin_42112038/article/details/125226736">最新支持7.2！用C++干掉讨厌的学生机房管理助手</a><br><a href="https://blog.csdn.net/weixin_42112038/article/details/127146526">全网首发！逆向分析学生机房管理助手7.4随机进程名算法</a><br><a href="https://blog.csdn.net/weixin_42112038/article/details/127468986">逆向分析学生机房管理助手7.5随机进程名算法</a><br><a href="https://blog.csdn.net/weixin_42112038/article/details/128052960">逆向分析学生机房管理助手7.8随机进程名算法</a><br>这里支持7.8，7.5、7.4、7.2和7.1以下版本，还有更古老的，名字是固定的（是哪几个进程看这里：<a href="https://blog.csdn.net/qq_37485351/article/details/104752930">【去除控制】对学生机房管理助手6.8的分析与突破（链接已失效）</a>），估计也没有什么机房还用这么老的版本，就不做支持了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> version[<span class="hljs-number">6</span>];<span class="hljs-comment">//考虑极端值如6.9.5</span><br>HKEY retKey;<br>LONG ret = <span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">&quot;SOFTWARE\\WOW6432Node\\ZM软件工作室\\学生机房管理助手&quot;</span>, <span class="hljs-number">0</span>, KEY_QUERY_VALUE | KEY_WOW64_32KEY, &amp;retKey);<br>DWORD size = <span class="hljs-built_in">sizeof</span>(version);<br><span class="hljs-built_in">RegQueryValueEx</span>(retKey, <span class="hljs-string">&quot;Version&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPBYTE)&amp;version, &amp;size);<br><span class="hljs-built_in">RegCloseKey</span>(retKey);<br><span class="hljs-keyword">if</span> (ret != ERROR_SUCCESS) &#123;<br><span class="hljs-built_in">SetWindowText</span>(TxOut, <span class="hljs-string">&quot;执行失败，可能未安装学生机房管理助手&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//取时间用于计算prozs.exe的随机进程名</span><br>SYSTEMTIME time;<br><span class="hljs-built_in">GetLocalTime</span>(&amp;time);<br><span class="hljs-type">int</span> n3 = time.wMonth + time.wDay;<br><span class="hljs-type">int</span> n4, n5, n6;<br>DWORD prozsPid;<br><span class="hljs-keyword">if</span> (version[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;7&#x27;</span> &amp;&amp;(version[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;5&#x27;</span> || version[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;8&#x27;</span>)) &#123;<br><span class="hljs-comment">//以下为7.5、7.8版本逻辑</span><br>PROCESSENTRY32 pe;<br>pe.dwSize = <span class="hljs-built_in">sizeof</span>(PROCESSENTRY32);<br>HANDLE hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Process32First</span>(hSnapshot, &amp;pe)) &#123;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-comment">//筛选长度为10（7.5）或大于等于4（7.8）的进程名（不包含末尾“.exe”）</span><br><span class="hljs-type">size_t</span> uImageLength = <span class="hljs-built_in">strlen</span>(pe.szExeFile);<br><span class="hljs-keyword">if</span> ((version[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;5&#x27;</span>)?(uImageLength == <span class="hljs-number">14</span>):(uImageLength &gt;= <span class="hljs-number">8</span>)) &#123;<br><span class="hljs-comment">//遍历字符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span>; ((version[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;5&#x27;</span>)?(j &lt; <span class="hljs-number">10</span>):(j &lt; uImageLength - <span class="hljs-number">4</span>)); j++) &#123;<br><span class="hljs-type">char</span> n7 = pe.szExeFile[j];<br><span class="hljs-comment">//符不符合d-m之间</span><br><span class="hljs-keyword">if</span> (!(n7 &gt;= <span class="hljs-number">100</span> &amp;&amp; n7 &lt;= <span class="hljs-number">109</span>))<span class="hljs-keyword">goto</span> IL_226;<br>&#125;<br><span class="hljs-comment">//就是你！</span><br>sLog += pe.szExeFile;<br>prozsPid = pe.th32ProcessID;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>IL_226:;<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(hSnapshot, &amp;pe));<br>&#125;<br><span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (version[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;7&#x27;</span> &amp;&amp; version[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;4&#x27;</span>) &#123;<br><span class="hljs-comment">//以下为7.4版本逻辑</span><br><span class="hljs-type">char</span> c1, c2, c3, c4;<br>n3 = time.wMonth * time.wDay, n4 = n3 % <span class="hljs-number">7</span>, n5 = n3 % <span class="hljs-number">5</span>, n6 = n3 % <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> n = n3 % <span class="hljs-number">9</span>;<br><span class="hljs-keyword">if</span> (n3 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>c1 = <span class="hljs-number">108</span> + n4,  c2 = <span class="hljs-number">75</span> + n,  c3 = <span class="hljs-number">98</span> + n5,  c4 = <span class="hljs-number">65</span> + n6;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c1 = <span class="hljs-number">98</span> + n,  c2 = <span class="hljs-number">65</span> + n4,  c3 = <span class="hljs-number">108</span> + n5,  c4 = <span class="hljs-number">75</span> + n6;<br>&#125;<br><span class="hljs-type">char</span> c[<span class="hljs-number">5</span>] = &#123;c1, c2, c3, c4, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>prozsPid = <span class="hljs-built_in">GetProcessIDFromName</span>(<span class="hljs-built_in">strcat</span>(c, <span class="hljs-string">&quot;.exe&quot;</span>));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (version[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;7&#x27;</span> &amp;&amp; version[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;2&#x27;</span>) &#123;<br><span class="hljs-type">char</span> c1, c2, c3, c4;<br><span class="hljs-comment">//以下为7.2版本逻辑</span><br>n4 = n3 % <span class="hljs-number">7</span>, n5 = n3 % <span class="hljs-number">9</span>, n6 = n3 % <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (n3 % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>c1 = <span class="hljs-number">103</span> + n5,  c2 = <span class="hljs-number">111</span> + n4,  c3 = <span class="hljs-number">107</span> + n6,  c4 = <span class="hljs-number">48</span> + n4;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c1 = <span class="hljs-number">97</span> + n4,   c2 = <span class="hljs-number">109</span> + n5,  c3 = <span class="hljs-number">101</span> + n6,  c4 = <span class="hljs-number">48</span> + n5;<br>&#125;<br><span class="hljs-type">char</span> c[<span class="hljs-number">5</span>] = &#123;c1, c2, c3, c4, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>prozsPid = <span class="hljs-built_in">GetProcessIDFromName</span>(<span class="hljs-built_in">strcat</span>(c, <span class="hljs-string">&quot;.exe&quot;</span>));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//以下为7.2版本之前的逻辑</span><br>n4 = n3 % <span class="hljs-number">3</span> + <span class="hljs-number">3</span>, n5 = n3 % <span class="hljs-number">4</span> + <span class="hljs-number">4</span>;<br><span class="hljs-type">char</span> c[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;p&#x27;</span>&#125;;<br><span class="hljs-keyword">if</span> (n3 % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>c[<span class="hljs-number">1</span>] = n4 + <span class="hljs-number">102</span>, c[<span class="hljs-number">2</span>] = n5 + <span class="hljs-number">98</span>;<br><span class="hljs-keyword">else</span><br>c[<span class="hljs-number">1</span>] = n4 + <span class="hljs-number">99</span>,  c[<span class="hljs-number">2</span>] = n5 + <span class="hljs-number">106</span>;<br>prozsPid = <span class="hljs-built_in">GetProcessIDFromName</span>(<span class="hljs-built_in">strcat</span>(c, <span class="hljs-string">&quot;.exe&quot;</span>));<br>&#125;<br><span class="hljs-built_in">KillProcess</span>(prozsPid, KILL_DEFAULT);<br><span class="hljs-built_in">KillProcess</span>(<span class="hljs-built_in">GetProcessIDFromName</span>(<span class="hljs-string">&quot;jfglzs.exe&quot;</span>), KILL_DEFAULT);<br><span class="hljs-comment">//停止zmserv服务防止关机</span><br>SC_HANDLE sc = <span class="hljs-built_in">OpenSCManager</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, SC_MANAGER_CONNECT);<br>SC_HANDLE zm = <span class="hljs-built_in">OpenService</span>(sc, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;zmserv&quot;</span>), SERVICE_STOP);<br>SERVICE_STATUS ss = &#123;&#125;;<br><span class="hljs-built_in">ControlService</span>(zm, SERVICE_CONTROL_STOP, &amp;ss);<br><span class="hljs-built_in">CloseServiceHandle</span>(sc);<br><span class="hljs-built_in">CloseServiceHandle</span>(zm);<br></code></pre></td></tr></table></figure><p>不过有个问题：在半夜12点前启动机房助手，过了12点再启动本程序，算出的进程名为新一天的。解决办法也不难：重启电脑，或者临时改系统时间为机房助手启动时的时间，在这个时间杀掉进程即可。</p><h3 id="解除一些系统工具的禁用和重启资源管理器"><a href="#解除一些系统工具的禁用和重启资源管理器" class="headerlink" title="解除一些系统工具的禁用和重启资源管理器"></a>解除一些系统工具的禁用和重启资源管理器</h3><p>原理是改注册表键值，详见此文：<a href="https://blog.csdn.net/weixin_42112038/article/details/125463423">改注册表实现解禁部分系统功能</a>。失败的话，用管理员权限运行，也有可能是杀毒软件拦截。</p><p><strong>重启资源管理器的办法</strong> ，我最初是先终止explorer.exe再命令行启动，但是后来发现一个简单的办法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HWND hwnd = <span class="hljs-built_in">FindWindow</span>(<span class="hljs-string">&quot;Shell_TrayWnd&quot;</span>, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//有这个类名的窗口一定隶属于explorer.exe</span><br>DWORD pid;<br><span class="hljs-built_in">GetWindowThreadProcessId</span>(hwnd, &amp;pid);<span class="hljs-comment">//反查出窗口PID</span><br><span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span> || hwnd == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">//资源管理器没在运行</span><br><span class="hljs-built_in">WinExec</span>(<span class="hljs-string">&quot;explorer.exe&quot;</span>, SW_SHOW);<span class="hljs-comment">//先直接运行，系统检测到explorer.exe是系统权限会自动重启它以降权（否则权限被继承，出现奇妙问题）</span><br><span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//pid = GetProcessIDFromName(&quot;explorer.exe&quot;);</span><br>&#125;<br>HANDLE handle = <span class="hljs-built_in">OpenProcess</span>(PROCESS_TERMINATE, FALSE, pid);<br><span class="hljs-built_in">TerminateProcess</span>(handle, <span class="hljs-number">2</span>);<span class="hljs-comment">//退出码为2</span><br><span class="hljs-built_in">CloseHandle</span>(handle);<br></code></pre></td></tr></table></figure><p><code>Shell_TrayWnd</code>这个窗口类名属于任务栏，任务栏又属于explorer.exe，用这个办法，可以得到explorer.exe的pid而无需用进程快照<code>Toolhelp32</code>遍历进程。退出码为2，终止进程后，系统认为它异常崩溃了，经过复杂的调用，最终winlogon.exe（<strong>Windows</strong> 登录应用程序）会自动重启它。</p><p>需要说明的是，解除USB的限制是改了机房助手的注册表，防止蓝屏，而不是改系统的注册表键值（机房助手也说明了嘛，非注册表法）</p><h3 id="黑屏或者全屏广播怎么办（最小化和关闭窗口）"><a href="#黑屏或者全屏广播怎么办（最小化和关闭窗口）" class="headerlink" title="黑屏或者全屏广播怎么办（最小化和关闭窗口）"></a>黑屏或者全屏广播怎么办（最小化和关闭窗口）</h3><p>用<code>Timer</code>每秒计时，然后判断鼠标是否在屏幕左上角，如果在，就弹出提示框，可以最小化当前窗口</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/4d36fe2d18f551326d8a5fbf3b267b7c.png" alt="好用"></p><p>实现：（写在<code>Timer</code>的事件中）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//写在程序前面定义处！</span><br>POINT p;<br><span class="hljs-comment">//检测鼠标左上角事件</span><br><span class="hljs-built_in">GetCursorPos</span>(&amp;p);<br><span class="hljs-keyword">if</span> (p.x == <span class="hljs-number">0</span> &amp;&amp; p.y == <span class="hljs-number">0</span>) &#123;<br>HWND topHwnd = <span class="hljs-built_in">GetForegroundWindow</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">MessageBox</span>(hwnd,<span class="hljs-string">&quot;检测到了鼠标位置变化！是否最小化置顶窗口？&quot;</span>, <span class="hljs-string">&quot;实时监测&quot;</span>, MB_YESNO | MB_ICONINFORMATION | MB_SETFOREGROUND | MB_TOPMOST) == IDYES) &#123;<br><span class="hljs-built_in">ShowWindow</span>(topHwnd, SW_MINIMIZE);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，控制窗口就最小化到任务栏了，可以随时恢复。</p><p>如下方法可以关闭窗口</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/8e6c1ab2060ed1e9d7418792e91cbd69.png" alt="更好用"><br><strong>选择“关闭”：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">PostMessage</span>(topHwnd,WM_CLOSE,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//异步</span><br></code></pre></td></tr></table></figure><p>这里是向窗口发送了关闭消息，就是按下Alt+F4的效果。有些窗口拦截此消息，这样的话就无效了。至于为什么要用<code>PostMessage()</code>而不是<code>SendMessage()</code>呢？前者只是把消息放进队列里就返回了，而后者则等消息处理完，返回结果才继续，在此期间会堵塞执行。例如，使用后者向桌面发送消息，会弹出关闭Windows的窗口，此时发送者程序将会无响应，直到用户对弹出窗口作出操作，前者则不会。</p><p><strong>选择“强制关闭”（对UWP窗口无效）：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//创建一个透明零大小的父窗口</span><br>HWND hParent = <span class="hljs-built_in">CreateWindowEx</span>(<span class="hljs-number">0</span>, WC_STATIC<span class="hljs-comment">/*头文件commctrl.h*/</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//将目标窗口设为子窗口</span><br><span class="hljs-built_in">SetParent</span>(topHwnd, hParent);<br><span class="hljs-comment">//关闭父窗口，子窗口也将一并销毁</span><br><span class="hljs-built_in">PostMessage</span>(hParent, WM_CLOSE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>若是目标窗口拦截<code>WM_CLOSE</code>消息，前面的方法就无效了，而这个可以。为什么？如果窗口没拦截<code>WM_CLOSE</code>，就会调用<code>DefWindowProc()</code>，这个函数对<code>WM_CLOSE</code>的处理是调用<code>DestroyWindow()</code>，它负责销毁窗口、删除计时器、销毁子窗口和发送<code>WM_DESTROY</code>消息等操作，但是必须要在窗口所处的线程调用它才行，否则返回<code>ERROR_ACCESS_DENIED</code>拒绝访问。<br>但是它有个bug，它会销毁子窗口，而不管这个子窗口是否属于调用线程，那么我们自己新建一个窗口，把目标窗口设为它的子窗口，然后销毁我们新建的窗口，子窗口也就一并销毁。<code>SetParent()</code>这个函数虽然文档说是同一个线程才行，但是实际上没有这种限制，就给了我们可乘之机。</p><h3 id="广播窗口化"><a href="#广播窗口化" class="headerlink" title="广播窗口化"></a>广播窗口化</h3><p>很多其他博客都说用<code>SetWindowLong()</code>设置极域广播窗口样式来显示菜单栏，把广播和全屏时的样式记下来调用即可。事实上，这样做确实可以显示工具条来，但是一旦你尝试拖动边边调整大小，它会不屈地尝试填满屏幕。也就是说，在全屏状态下，哪怕你用各种办法调整了它的大小，它也会复原，这种方法无效！</p><p>有些时候，极域窗口化广播时会显示一个工具条，其中一个按钮是全屏按钮，可以自如在全屏与窗口之间切换。而全屏广播时它会不见，并且就算你弄出来了，它也是灰色的，禁用状态。用spy++查看广播窗口，可以发现工具条没有消失，只是沉底了而已，并且全屏按钮的控件ID是<code>1004</code>。<br>我们知道，当点击一个控件后，会发送<code>WM_COMMAND</code>消息给窗口，其中的<code>wParam</code>参数包含了动作（高位）与ID（低位）信息。极域是MFC程序，也是这样子的。那么，我们就可以模拟点击，发送消息给它，它会以为全屏按钮可用并照做，就能实现广播窗口化。再发送一次就能复原。代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//获取广播窗口句柄</span><br>HWND bdCst = <span class="hljs-built_in">FindWindow</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;屏幕广播&quot;</span>);<br><span class="hljs-comment">//模拟点击</span><br><span class="hljs-built_in">PostMessage</span>(bdCst, WM_COMMAND, <span class="hljs-built_in">WPARAM</span>((BM_CLICK &lt;&lt; <span class="hljs-number">16</span>) | <span class="hljs-number">1004</span>), <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><h3 id="解断网限制"><a href="#解断网限制" class="headerlink" title="解断网限制"></a>解断网限制</h3><p>极域的断网分多种，有完全不能上网（右下角图标有感叹号）、白&#x2F;黑名单（没有感叹号，但是出现“该网页已被阻止！”，实现这些极域也是各有分工，既有驱动，也有网关服务。那么通过反编译和其他分析（<a href="https://blog.csdn.net/weixin_42112038/article/details/128052960">【干货最多】逆向分析学生机房管理助手7.8随机进程名算法、极域U盘、网络、键盘限制</a>，还没写完），我们的思路就是想欺骗驱动，然后杀了网关服务及其守护进程，再干脆干掉驱动。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//以下代码依然不稳定！！！</span><br><span class="hljs-comment">//发送终止指令</span><br>HANDLE hNetFilter = <span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">&quot;\\\\.\\TDNetFilter&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">GetLastError</span>())&#123;<br><span class="hljs-built_in">DeviceIoControl</span>(hNetFilter, <span class="hljs-number">0x120014</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">CloseHandle</span>(hNetFilter);<br>&#125;<br><span class="hljs-comment">//杀掉网关服务及其守护进程</span><br><span class="hljs-built_in">KillProcess</span>(<span class="hljs-built_in">GetProcessIDFromName</span>(<span class="hljs-string">&quot;MasterHelper.exe&quot;</span>),KILL_DEFAULT);<br><span class="hljs-built_in">KillProcess</span>(<span class="hljs-built_in">GetProcessIDFromName</span>(<span class="hljs-string">&quot;GATESRV.exe&quot;</span>),KILL_DEFAULT);<br><span class="hljs-comment">//停止网络过滤驱动</span><br>SC_HANDLE sc = <span class="hljs-built_in">OpenSCManager</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, SC_MANAGER_CONNECT);<br>SC_HANDLE hFilt = <span class="hljs-built_in">OpenService</span>(sc, <span class="hljs-string">&quot;TDNetFilter&quot;</span>, SERVICE_STOP | DELETE);<br>SERVICE_STATUS ss = &#123;&#125;;<br><span class="hljs-built_in">ControlService</span>(hFilt, SERVICE_CONTROL_STOP, &amp;ss);<br><span class="hljs-built_in">DeleteService</span>(hFilt);<br><span class="hljs-built_in">CloseServiceHandle</span>(sc);<br><span class="hljs-built_in">CloseServiceHandle</span>(hFilt);<br></code></pre></td></tr></table></figure><h3 id="解禁USB"><a href="#解禁USB" class="headerlink" title="解禁USB"></a>解禁USB</h3><p>详见<a href="https://blog.csdn.net/weixin_42112038/article/details/128052960#_52">此博客</a>。</p><h3 id="解键盘锁"><a href="#解键盘锁" class="headerlink" title="解键盘锁"></a>解键盘锁</h3><p><strong>解锁方法参考了<a href="https://www.52pojie.cn/thread-542884-1-1.html">https://www.52pojie.cn/thread-542884-1-1.html</a>，表示感谢</strong><br><strong>具体分析参见<a href="https://blog.csdn.net/weixin_42112038/article/details/126228989">对极域64位禁止终止进程、键盘锁定的分析</a></strong><br>极域会有键盘锁，也是Hook。Hook有个特点就是后来居上，你先Hook，我再Hook，那最后优先生效的就是我的。那就好办，覆盖它就好！不过极域定时锁键盘，所以要循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HHOOK kbdHook;<br><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">HookProc</span><span class="hljs-params">(<span class="hljs-type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">KeyHookThreadProc</span><span class="hljs-params">(LPVOID lpParameter)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>kbdHook = (HHOOK)<span class="hljs-built_in">SetWindowsHookEx</span>(WH_KEYBOARD_LL, (HOOKPROC)HookProc, <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-number">0</span>);<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">25</span>);<br><span class="hljs-built_in">UnhookWindowsHookEx</span>(kbdHook);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了随时开启和关闭，新建一个线程，不用就挂起，需要就恢复。原文没有<code>Sleep()</code>延时，吃CPU，加上延时25ms即可。</p><p>可能会出现解锁后，大多数按键可以正常使用，但是Ctrl+Alt+Delete无法使用的情况，这是因为<code>WH_KEYBOARD_LL</code>这个系统hook没法拦住这三个键，极域就装了个底层的键盘驱动来拦截，这个在应用层很难恢复，想卸载它，还比较麻烦。</p><p>而最终的解决方案便是欺骗这个键盘驱动，如下所示：（控制码可通过IDA Pro反编译得到）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//打开符号链接</span><br>HANDLE hDevice = <span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">&quot;\\\\.\\TDKeybd&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetLastError</span>()) &#123;<br>BOOL bEnable = TRUE;<br><span class="hljs-comment">//发送控制代码</span><br><span class="hljs-built_in">DeviceIoControl</span>(hDevice, <span class="hljs-number">0x220000</span>, &amp;bEnable, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-built_in">CloseHandle</span>(hDevice);<br>&#125;<br></code></pre></td></tr></table></figure><p>另外一个软件JiYuTrainer（<a href="https://blog.csdn.net/u012314571/article/details/89811045">破解极域电子教室，老师再也控制不了我了！极域电子教室防控制</a>）给极域注入了dll不让它锁键盘，算是治根了。</p><h3 id="启动置顶任务管理器"><a href="#启动置顶任务管理器" class="headerlink" title="启动置顶任务管理器"></a>启动置顶任务管理器</h3><p>好多软件都有类似功能，但是都是启动后自己循环调用<code>SetWindowPos()</code>置顶它，其实这与它自带的置顶功能是不同的，win10&#x2F;11的任务管理器勾选“置于顶层”后，可以覆盖住大多数窗口（包括极域还有绝大多数软件，当然也包括你自己置顶的窗口）因为它们都不是一个Z序段了。其实它用了一个未文档化的函数<code>CreateWindowInBand()</code>，这个函数只有微软自己的程序才能用。如果我们要置顶任务管理器，可行的方法就是模拟勾选“置于顶层”。</p><p>用spy++可以得到“置于顶层”这个菜单项的ID：<code>0x7704</code>（Windows 10），向任务管理器发送<code>WM_COMMAND</code>，wParam就填这个ID，任务管理器就会觉得你勾选了它，会自动置顶。（当然如果已经置顶，它就会取消置顶，所以我们必须事先判断勾选没，没勾选才发送。）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//判断有没有启动</span><br>HWND h=<span class="hljs-built_in">FindWindow</span>(<span class="hljs-string">&quot;TaskManagerWindow&quot;</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span>(!h)&#123;<br><span class="hljs-comment">//如果还没有就先启动</span><br><span class="hljs-built_in">WinExec</span>(<span class="hljs-string">&quot;taskmgr&quot;</span>, SW_SHOW);<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-comment">//等待窗口创建完成</span><br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">50</span>);<br>h=<span class="hljs-built_in">FindWindow</span>(<span class="hljs-string">&quot;TaskManagerWindow&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<span class="hljs-keyword">while</span>(!h);<br>&#125;<br><span class="hljs-comment">//获取菜单，取得勾选状态</span><br>HMENU hm = <span class="hljs-built_in">GetMenu</span>(h);<br>MENUITEMINFO mii = &#123;<span class="hljs-built_in">sizeof</span>(MENUITEMINFO), MIIM_STATE&#125;;<br><span class="hljs-built_in">GetMenuItemInfo</span>(hm, <span class="hljs-number">0x7704</span>, FALSE, &amp;mii);<br><span class="hljs-comment">//如果未勾选就模拟勾选</span><br><span class="hljs-keyword">if</span>(!(mii.fState &amp; MFS_CHECKED))<br><span class="hljs-built_in">PostMessage</span>(h, WM_COMMAND, <span class="hljs-number">0x7704</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="顺便说说"><a href="#顺便说说" class="headerlink" title="顺便说说"></a>顺便说说</h3><p>这个程序是win32程序，无需易语言或MFC，用Dev C++就可以打开开发，方便大家学习哈。编译环境选择高版本的MinGW GCC即可。</p><h3 id="附录1：学生机房管理助手的软件黑名单（9-0版本）"><a href="#附录1：学生机房管理助手的软件黑名单（9-0版本）" class="headerlink" title="附录1：学生机房管理助手的软件黑名单（9.0版本）"></a>附录1：学生机房管理助手的软件黑名单（9.0版本）</h3><p>进程名包含这些词就会蓝屏（加粗的名字不仅匹配进程名，还匹配窗口名）：</p><p>vmware、VirtualBox、Virtual PC、 <strong>虚拟机</strong> 、 <strong>电子教室</strong> 、ProcView、IceSword、Procmast.exe、ProcessManager.exe、rstray.exe、PFW.exe、FTCleaner.exe、Wsyscheck.exe、XueTr.exe、prom.exe、ProcessX.exe、pchunter、 <strong>Killer.exe</strong> 、procmgr.exe、<strong>ProcessHacker</strong>.exe、killcontrol、PowerTool32.exe、360taskmgr、YtWinAst、KVFWMain.exe、ECQ-PS.exe、SnipeSword、procexp、 <strong>MsgFlood.exe</strong> 、ProcessOVER、procdeal、 <strong>桌面</strong> 、 <strong>任务</strong> 、 <strong>进程</strong> 、Prayaya、dexpot.exe、vdeskman.exe、mdesk.exe、 <strong>virtualdesk</strong> 、multideskt.exe、VirDsk.exe、IDesktop.exe、YtMDesk.exe、coon.exe、zmqh.exe、DexpotProPortable.exe、Desktops.exe、wisedesktop.exe、DESKTOP.exe、Vdesktop.exe、MagicDesktop.exe、multidesktop.exe、  <strong>v13</strong> （这个有特别关照，在蓝屏窗口加载时还会自动杀掉带有这个名字的进程）、RegWX64.exe、QQPCNetFlow.exe、BDMANetLimiter.exe、netmon.exe、360netman.exe、HelloTeacher.exe、EHacker.exe、PowerTool64.exe、zydesk.exe、perfmon.exe、 <strong>吾爱破解</strong> 、 <strong>极域</strong> 、prcview.exe、processlasso.exe、netfuke.exe、 <strong>去除控制</strong> 、 <strong>课堂狂欢器</strong> 、 <strong>课堂工具</strong> 、fuckmythware、SpecialSet.exe、JiYuTrainer.exe、skieskiller、WindowsKernelExplorer.exe、msconfig.exe。当然也包括我们的尊贵的任务管理器啦！</p><h3 id="附录2：在线根据明文生成学生机房管理助手密码（7-2以上）"><a href="#附录2：在线根据明文生成学生机房管理助手密码（7-2以上）" class="headerlink" title="附录2：在线根据明文生成学生机房管理助手密码（7.2以上）"></a>附录2：在线根据明文生成学生机房管理助手密码（7.2以上）</h3><p>访问<a href="https://try.dot.net/">这个网站</a>，在代码运行窗口输入如下内容，便可生成密文，将密文写入注册表HKEY_CURRENT_USER\Software:n（REG_SZ），机房助手密码将会被立即更改：（也可以本地运行）</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 代码来自学生机房管理助手9.0 set.exe，逆向、整理：小流汗黄豆</span><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Security.Cryptography;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.IO;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>&#123;<br><span class="hljs-comment">// 更改这里的内容</span><br><span class="hljs-built_in">string</span> string_3 = <span class="hljs-string">&quot;12345678&quot;</span>;<br><span class="hljs-comment">// Class6.smethod_0()</span><br><span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span> = <span class="hljs-string">&quot;C:\\WINDOWS&quot;</span>;<br><span class="hljs-built_in">string</span> s = <span class="hljs-keyword">value</span>.Substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br><span class="hljs-built_in">string</span> s2 = <span class="hljs-keyword">value</span>.Substring(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>);<br>DESCryptoServiceProvider descryptoServiceProvider = <span class="hljs-keyword">new</span> DESCryptoServiceProvider();<br>descryptoServiceProvider.Key = Encoding.UTF8.GetBytes(s);<br>descryptoServiceProvider.IV = Encoding.UTF8.GetBytes(s2);<br>MemoryStream memoryStream = <span class="hljs-keyword">new</span> MemoryStream();<br>CryptoStream cryptoStream = <span class="hljs-keyword">new</span> CryptoStream(memoryStream, descryptoServiceProvider.CreateEncryptor(), CryptoStreamMode.Write);<br>StreamWriter streamWriter = <span class="hljs-keyword">new</span> StreamWriter(cryptoStream);<br>streamWriter.Write(string_3);<br>streamWriter.Flush();<br>cryptoStream.FlushFinalBlock();<br>memoryStream.Flush();<br><span class="hljs-built_in">string</span> string_4 = Convert.ToBase64String(memoryStream.GetBuffer(), <span class="hljs-number">0</span>, checked((<span class="hljs-built_in">int</span>)memoryStream.Length));<br><span class="hljs-comment">// Class6.smethod_3()</span><br>StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; string_4.Length; i++)<br>stringBuilder.Append((<span class="hljs-built_in">char</span>)(string_4[i] - <span class="hljs-number">10</span>));<br>string_3 = stringBuilder.ToString();<br><span class="hljs-comment">// Class6.smethod_2()</span><br>MD5CryptoServiceProvider md5CryptoServiceProvider = <span class="hljs-keyword">new</span> MD5CryptoServiceProvider();<br><span class="hljs-built_in">byte</span>[] array2 = md5CryptoServiceProvider.ComputeHash(Encoding.Default.GetBytes(string_3));<br>stringBuilder.Clear();<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; array2.Length; i++)<br>stringBuilder.Append(array2[i].ToString(<span class="hljs-string">&quot;x2&quot;</span>));<br><span class="hljs-built_in">string</span> str = stringBuilder.ToString().Substring(<span class="hljs-number">10</span>);<br><br>Console.WriteLine(str);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 期望输出：8a29cc29f5951530ac69f4</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>打倒极域帝国主义！</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HuffmanTree</title>
    <link href="/2024/09/17/HuffmanTree/"/>
    <url>/2024/09/17/HuffmanTree/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>家长直呼太暴力，这些算法可能会被删除</title>
    <link href="/2024/09/17/%E5%AE%B6%E9%95%BF%E7%9B%B4%E5%91%BC%E5%A4%AA%E6%9A%B4%E5%8A%9B%EF%BC%8C%E8%BF%99%E4%BA%9B%E7%AE%97%E6%B3%95%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%AB%E5%88%A0%E9%99%A4/"/>
    <url>/2024/09/17/%E5%AE%B6%E9%95%BF%E7%9B%B4%E5%91%BC%E5%A4%AA%E6%9A%B4%E5%8A%9B%EF%BC%8C%E8%BF%99%E4%BA%9B%E7%AE%97%E6%B3%95%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%AB%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="家长直呼太暴力！这些算法可能会被删除"><a href="#家长直呼太暴力！这些算法可能会被删除" class="headerlink" title="家长直呼太暴力！这些算法可能会被删除"></a><a href="https://www.cnblogs.com/wlzhouzhuan/p/15344765.html" title="发布于 2021-09-27 19:53">家长直呼太暴力！这些算法可能会被删除</a></h1><p>近日，洛谷网络科技有限公司多位用户家长向 @<a href="https://www.luogu.com.cn/user/1">kkksc03</a> 反映，部分算法存在血腥、暴力等不利于青少年儿童的因素出现，要求对相关算法进行整改或被删除。</p><p>洛谷网络科技有限公司题目组管理员在接受采访时说道，在最近几天内，洛谷收到了数十条家长来信，声称网站教授的部分算法存在“血腥”、“暴力”等内容。“他们说这些东西会教坏他们家的孩子，要求我们整改这些算法，把这些对小朋友不太好的东西删掉，或者直接把算法删除。”</p><p>随着国庆 (雾) 的到来，很多家长直接来到洛谷反映情况。记者在现场随机采访了几位家长，询问他们对这些算法的看法。</p><p>刘女士的儿子正在洛谷学习普及组内容。在采访中刘女士告诉记者，希望洛谷停开 <strong>匈牙利算法</strong> 。“我看里面讲的都是些一一匹配啊、二分图啊之类的匹配问题， <strong>这不是教孩子怎么找npy么？那他以后岂不是学会早恋了？</strong> ”王先生也有类似的想法。他要求洛谷整改<strong>月赛</strong>内容。“ <strong>听说课程里面有‘选妹子’，要是小朋友被女拳打了该怎么办？</strong> 太危险了！”</p><p>认为数据结构太危险、容易伤到孩子，是很多家长的共同心声。王大爷今年已经六十多岁了，却依然专程跑到学校，高呼停止教授<strong>Splay树</strong>和 <strong>Treap树</strong> 。他说，<strong>自家的孙子很小的时候撞到树上过，他担心这两棵树会给孩子造成心理阴影。</strong></p><p>此外， <strong>最大流</strong> 、<strong>费用流</strong>等算法也遭到了部分家长的抵制。“主要还是玩水安全嘛”，陈女士说，“孩子们看到这些流啊、流量啊、回家就很可能会下水去游泳，我们当家长的还是不放心嘛。”而张先生的态度则更为坚决：“ <strong>现在就敢玩水，将来敢玩什么，我都不敢想了！</strong> ”</p><p>同样作为算法， <strong>《深入浅出程序设计竞赛》</strong> 受到抵制的理由则有很大不同。吴先生告诉记者：“主要是，这个（深入浅出程序设计竞赛的教材）太厚了，得有好几斤重， <strong>网上小孩子如果嬉戏打闹，拿着这本书到处乱甩（的话），非常危险。</strong> 要是碰到头的话，那肯定会把头磕破的，你说这个责任由谁来承担？”</p><p>在众多算法中，家长抵制呼声最高的则是图论算法。在家长看来，有的算法要找环，会绕晕到孩子；画图用的笔可能会戳伤手指；很多算法在搜索的时候可能会把系统栈用爆；有些算法写错了要输中量参解改很久，可能会累到小朋友，“ <strong>把我家小孩累死了该怎么办？</strong> ”</p><p>除了担心孩子们的安全外，对孩子生活习惯的影响也成为了家长们抵制课程的要素之一。叶女士告诉记者，她希望洛谷整改全部英语题面。叶女士的儿子才考普及组，却已经学会了sh*t，f**k等高级词汇。“孩子现在出口就是这种词，影响很不好，肯定是洛谷的题面教的。”叶女士说。</p><p>同样，李先生对于洛谷的bfs, dfs, bdfs算法也颇有微词。“我们还是想给孩子营造一个健康的成长环境嘛，我看课上，居然让小朋友们去暴力遍历图啊、暴力找答案啊，这不是教小朋友们暴力么？ <strong>平时打打杀杀的动画片我都不让自家小孩看，更不要说动手去做这些了。</strong> ”</p><p>此外，一些非盈利机构也遭到了家长的抵制。很多家长认为，玩电脑是影响自家小孩学习的关键原因，因此强烈要求洛谷取缔  <strong>F ，并取消相关竞赛。 <strong>N</strong>P</strong> 首当其冲，周先生接受采访时说道：“听说这门课要学生们自己学习算法，要是真把算法学好了，不就会有更多小朋友沉迷电脑么？** 如果他们不学算法的话，我们的小孩就不会这么贪玩电脑了。<strong>”同样，一些家长也对</strong>浏览器 <strong>表示不满：“</strong> 没有浏览器，小朋友们自然就不会沉迷上网了。**”</p><p>让记者感到惊奇的是，很多家长对一些计算机基础数学内容也有较大的意见。部分家长要求下架<strong>《组合数学》</strong>  <strong>《混凝土数学》</strong> 等课程。在问及原因时，家长告诉记者，<strong>文中的感叹号很像一根棍子，会引发小朋友的暴力倾向。</strong></p><p>针对此事，记者尝试联络洛谷网络科技有限公司的管理员。管理员回复称，@<a href="https://www.luogu.com.cn/user/1">kkksc03</a> 校长正在忙于建设世界一流 OJ，暂未就此事件给予答复。</p><p>不过，也有少数家长对一些算法表示支持。一位家长告诉记者，希望学校着力建设《编程语言基础》课程。“ <strong>孩子如果在学校学好语言这些东西的话，回让他搬砖的时候应该能更好一些。</strong> ”</p>]]></content>
    
    
    
    <tags>
      
      <tag>或将被删除？</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/16/hello-world/"/>
    <url>/2024/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
